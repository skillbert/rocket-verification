% need all this to get indexable bool[] ....
% i must be doing something wrong right??

map setbool: List(Bool) # Int # Bool -> List(Bool);
map getbool: List(Bool) # Int -> Bool;
map initbools: Int # Bool -> List(Bool);

var m:List(Bool);
	n:Int;
	v:Bool;

eqn n==0 -> setbool(m,n,v) = v |> tail(m);
	n!=0 -> setbool(m,n,v) = head(m) |> setbool(tail(m),n-1,v);
	n==0 -> getbool(m,n) = head(m);
	n!=0 -> getbool(m,n) = getbool(tail(m),n-1);
	n==0 -> initbools(n,v) = [];
	n!=0 -> initbools(n,v) = v |> initbools(n-1,v);


act
	%booster module
	%TODO change to number 0/1 typedef
	ignite_bm:Bool;
	stop_bm:Bool;
	confirm_bm_thrust:Bool;
	fail_bm_thrust:Bool;
	fire_bm:Bool;

	s_startup_bm,r_startup_bm,c_startup_bm:Bool;
	s_stop_bm,r_stop_bm,c_stop_bm:Bool;
	s_confirm_bm_thrust,r_confirm_bm_thrust,c_confirm_bm_thrust:Bool;
	s_stopped_bm,r_stopped_bm,c_stopped_bm:Bool;
	s_fail_bm_thrust,r_fail_bm_thrust,c_fail_bm_thrust:Bool;

	%launch module
	ignite_lm;
	confirm_lm_thrust;
	fail_lm_thrust;
	stop_lm;
	fire_lm;
	orbit_ok_lm;
	orbit_achieved;
	release_ground_clamps;
	s_release_bm,r_release_bm,c_release_bm:Bool;

	s_lm_abort,r_lm_abort,c_lm_abort;
	s_lm_orbit_ok,r_lm_orbit_ok,c_lm_orbit_ok;

	%orbital module
	seperate_om;
	ignite_om;
	confirm_om_thrust;
	stop_om;
	fail_om_thrust;
	fire_om;
	orbit_ok_om;

	s_om_abort,r_om_abort,c_om_abort;
	s_om_orbit_ok,r_om_orbit_ok,c_om_orbit_ok;

	%crew module
	seperate_cm;
	abort_cm;
	abort_pad;
	land_cm;
	do_space_stuff;
proc
	BM(left:Bool,broken:Bool) =
		(!broken) -> r_startup_bm(left) . ignite_bm(left) . BM_start(left)
		+ r_stop_bm(left) . BM(left,broken)
		+ r_release_bm(left) . BM_seperated;
	BM_start(left:Bool) =
		BM_fail(left) 
		+ r_stop_bm(left) . BM_stop(left)
		+ s_confirm_bm_thrust(left) . BM_on(left);
	BM_seperated = delta;
	BM_stop(left:Bool) = stop_bm(left) . s_stopped_bm(left) . BM(left,false);
	BM_fail(left:Bool) = fail_bm_thrust(left) . (s_fail_bm_thrust(left) + r_stop_bm(left) . s_stopped_bm(left)) . BM(left,true);
	BM_on(left:Bool) = 
		fire_bm(left) . BM_on(left)
		+ BM_fail(left)
		+ r_stop_bm(left) . BM_stop(left);

	LM_startup = (ignite_lm . s_startup_bm(true) . s_startup_bm(false)) . LM_ground(false,[false,false]);
	
	LM_ground(engine_on:Bool,bm_engine:List(Bool)) =
		  (!getbool(bm_engine,0)) -> r_confirm_bm_thrust(false) . LM_ground(engine_on,setbool(bm_engine,0,true))
		+ (!getbool(bm_engine,1)) -> r_confirm_bm_thrust(true) . LM_ground(engine_on,setbool(bm_engine,1,true))
		+ (!engine_on) -> confirm_lm_thrust . LM_ground(true,bm_engine)
		+ (engine_on && getbool(bm_engine,0) && getbool(bm_engine,1)) -> release_ground_clamps . LM_fly
		+ (engine_on) -> fire_lm . LM_ground(engine_on,bm_engine)
		+ (r_fail_bm_thrust(true) + r_fail_bm_thrust(false) + fail_lm_thrust) . LM_ground_abort;

	LM_fly =
		fire_lm . LM_fly
		+(r_fail_bm_thrust(true)+r_fail_bm_thrust(false)+fail_lm_thrust) . LM_abort
		+orbit_ok_lm . s_stop_bm(true) . s_stop_bm(false) . LM_stop_bm([true,true]); 

	LM_stop_bm(bm_on:List(Bool)) = 
		(getbool(bm_on,0) || getbool(bm_on,1)) -> (
			getbool(bm_on,0) -> (r_stopped_bm(false) + r_fail_bm_thrust(false)) . LM_stop_bm(setbool(bm_on,0,false))
			+ getbool(bm_on,1) -> (r_stopped_bm(true) + r_fail_bm_thrust(true)) . LM_stop_bm(setbool(bm_on,1,false))
			+ fire_lm . LM_stop_bm(bm_on)
			+ fail_lm_thrust . LM_abort
		) <> LM_sep_bm([true,true]);

	LM_sep_bm(bm_attached:List(Bool)) = 
		(getbool(bm_attached,0) || getbool(bm_attached,1)) -> (
			getbool(bm_attached,0) -> s_release_bm(false) . LM_sep_bm(setbool(bm_attached,0,false))
			+ getbool(bm_attached,1) -> s_release_bm(true) . LM_sep_bm(setbool(bm_attached,1,false))
			+ fire_lm . LM_sep_bm(bm_attached)
			+ LM_abort %add sep fail action
			+ fail_lm_thrust . LM_abort
		) <> LM_fly_space;

	LM_abort = s_lm_abort . s_stop_bm(true) . s_stop_bm(false) . stop_lm . LM_safe;

	LM_fly_space = 
		fire_lm . LM_fly_space
		+fail_lm_thrust . s_lm_abort
		+orbit_ok_lm . stop_lm . s_lm_orbit_ok . delta;

	%launch aborted at pad, rocket still on ground
	LM_ground_abort = s_stop_bm(true) . s_stop_bm(false) . stop_lm . abort_pad . LM_safe;
	%not 100% sure, we need to continue talking to boosters for their controllers to not hang
	LM_safe = LM_ignore_bm . LM_safe;
	%TODO remove
	LM_ignore_bm = (
			r_confirm_bm_thrust(true) + r_confirm_bm_thrust(false)
			+ r_fail_bm_thrust(true) + r_fail_bm_thrust(false) 
			%not sure about these 2
			%+ confirm_lm_thrust + fail_lm_thrust
		);

	OM_wait = r_lm_orbit_ok . OM;
	OM = seperate_om . ignite_om . (
		confirm_om_thrust . OM_fly
		+ fail_om_thrust . stop_om . s_om_abort . delta
	);
	OM_fly = 
		fire_om . OM_fly
		+ fail_om_thrust . stop_om . s_om_abort . delta
		+ orbit_ok_om . s_om_orbit_ok . delta;

	%crew module
	CM = 
		(r_lm_abort + r_om_abort) . seperate_cm . abort_cm . CM_land
		+ r_om_orbit_ok . seperate_cm . orbit_achieved . do_space_stuff . CM_land;

	%TODO add sep SM, chutes, heatshield, airbags
	CM_land = land_cm . delta;
	

init allow(
	{
		ignite_bm,
		stop_bm,
		confirm_bm_thrust,
		fail_bm_thrust,
		fire_bm,

		c_startup_bm,
		c_stop_bm,
		c_confirm_bm_thrust,
		c_fail_bm_thrust,
		c_stopped_bm,

		%launch module
		ignite_lm,
		confirm_lm_thrust,
		fail_lm_thrust,
		stop_lm,
		fire_lm,
		orbit_ok_lm,
		orbit_achieved,
		release_ground_clamps,
		c_release_bm,

		c_lm_abort,
		c_lm_orbit_ok,

		%orbital module
		seperate_om,
		ignite_om,
		confirm_om_thrust,
		stop_om,
		fail_om_thrust,
		fire_om,
		orbit_ok_om,
		
		c_om_abort,
		c_om_orbit_ok,

		%crew module
		seperate_cm,
		abort_cm,
		abort_pad,
		land_cm,
		do_space_stuff
	},
	comm({
		r_startup_bm|s_startup_bm -> c_startup_bm,
		r_stop_bm|s_stop_bm -> c_stop_bm,
		r_confirm_bm_thrust|s_confirm_bm_thrust -> c_confirm_bm_thrust,
		r_stopped_bm|s_stopped_bm -> c_stopped_bm,
		r_fail_bm_thrust|s_fail_bm_thrust -> c_fail_bm_thrust,
		s_lm_abort|r_lm_abort -> c_lm_abort,
		s_lm_orbit_ok|r_lm_orbit_ok -> c_lm_orbit_ok,
		s_om_abort|r_om_abort -> c_om_abort,
		s_om_orbit_ok|r_om_orbit_ok -> c_om_orbit_ok,
		s_release_bm|r_release_bm -> c_release_bm
	},
		BM(true,false) || BM(false,false) || LM_startup || OM_wait || CM
	)
);
