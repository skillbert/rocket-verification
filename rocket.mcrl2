
%toggle comment for 1/2/3 boosters (4 different placing in code)
% sort BoosterId = struct main;
sort BoosterId = struct left|right;
% sort BoosterId = struct left|right|extra;

map NOFAIL:Bool;

%set to true to skip component failures in the model
eqn NOFAIL = false;


act
	%booster module
	ignite_bm:BoosterId;
	stop_bm:BoosterId;
	confirm_bm_thrust:BoosterId;
	fail_bm_thrust:BoosterId;
	detach_from_lm:BoosterId;
	
	s_confirm_bm_thrust,r_confirm_bm_thrust,c_confirm_bm_thrust:BoosterId;
	s_stopped_bm,r_stopped_bm,c_stopped_bm:BoosterId;
	s_fail_bm_thrust,r_fail_bm_thrust,c_fail_bm_thrust:BoosterId;

	%launch module
	ignite_lm;
	confirm_lm_thrust;
	fail_lm_thrust;
	stop_lm;
	detach_ground_clamps;
	abort_pad;

	s_startup_bm,r_startup_bm,c_startup_bm:BoosterId;
	s_stop_bm,r_stop_bm,c_stop_bm:BoosterId;
	s_detach_bm,r_detach_bm,c_detach_bm:BoosterId;
	s_detached_bm,r_detached_bm,c_detached_bm:BoosterId;
	s_lm_abort,r_lm_abort,c_lm_abort;
	s_lm_ready_detach,r_lm_ready_detach,c_lm_ready_detach;

	%orbital module
	detach_lm;
	ignite_om;
	confirm_om_thrust;
	stop_om;
	fail_om_thrust;
	remap_valves_om;

	s_om_abort,r_om_abort,c_om_abort;
	s_om_ready_detach,r_om_ready_detach,c_om_ready_detach;
	s_detach_ascent_cover,r_detach_ascent_cover,c_detach_ascent_cover;
	s_confirm_cover_detach,r_confirm_cover_detach,c_confirm_cover_detach;

	%crew module
	detach_om;
	abort_cm;
	chutes_cm;
	detach_descent_cover;
	airbags_cm;
	land_cm;
	do_space_stuff;
	detach_ascent_cover;
	remap_valves_sm;
	detach_sm;

	%fuel sensors
	s_bm_fuel_empty,r_bm_fuel_empty,c_bm_fuel_empty;
	s_lm_fuel_empty,r_lm_fuel_empty,c_lm_fuel_empty;

	%altitude sensor/gps
	s_alt_stage_om,r_alt_stage_om,c_alt_stage_om;
	
				
proc

	%predefined multiactions
	%toggle comment for 1/2/3 boosters
	% s_stop_bm_all = s_stop_bm(main);
	% s_start_bm_all = s_startup_bm(main);
	% s_detach_bm_all = s_detach_bm(main);
	s_stop_bm_all = s_stop_bm(left)|s_stop_bm(right);
	s_start_bm_all = s_startup_bm(left)|s_startup_bm(right);
	s_detach_bm_all = s_detach_bm(left)|s_detach_bm(right);
	% s_stop_bm_all = s_stop_bm(left)|s_stop_bm(right)|s_stop_bm(extra);
	% s_start_bm_all = s_startup_bm(left)|s_startup_bm(right)|s_startup_bm(extra);
	% s_detach_bm_all = s_detach_bm(left)|s_detach_bm(right)|s_detach_bm(extra);

	%@desc: Sends fuel empty signal when either of the boosters is about to run out of fuel
	Fuelsensor = s_bm_fuel_empty. s_lm_fuel_empty . delta;

	%@desc: Sends staging signals when orbit is heigh enough for different staging points
	Altimeter = s_alt_stage_om . delta;

	%@param(broken): The booster had a failure and can not be started again
	%@desc: This process defines the main actions for a BM (start, stop, detach).
	BM(side:BoosterId,broken:Bool) =
		(!broken) -> r_startup_bm(side) . ignite_bm(side) . BM_start(side)
		+ r_stop_bm(side) . BM(side,broken)
		+ r_detach_bm(side) . detach_from_lm(side) . s_detached_bm(side) . delta;
	
	%@desc: This process defines the possible actions while the BM is starting (fail, stop, on).
	BM_start(side:BoosterId) =
		confirm_bm_thrust(side) . s_confirm_bm_thrust(side) . BM_on(side)
		+ (!NOFAIL)-> BM_fail(side)
		+ r_stop_bm(side) . BM_stop(side);
	
	%@desc: This process defines the actions when the BM needs to stop which means it is broken.
	BM_stop(side:BoosterId) = stop_bm(side) . s_stopped_bm(side) . BM(side,false);

	%@desc: This process defines the actions when a BM fails. 
	BM_fail(side:BoosterId) = fail_bm_thrust(side) . (s_fail_bm_thrust(side) + r_stop_bm(side) . s_stopped_bm(side)) . BM(side,true);

	%@desc: When the BM is on it can thrust the engine, fail or it can be stopped. .
	BM_on(side:BoosterId) = 
		(!NOFAIL)-> BM_fail(side)
		+ r_stop_bm(side) . BM_stop(side);
		

	%@desc: The LM and BM startup happen in parallel. Ignite LM, BMLeft and BMRight, 
	LM_startup = (ignite_lm . s_start_bm_all) . LM_ground(false,{});
	
	%@param(engine_on): Wether the main LM engine is on
	%@param(bm_engine): Set of BM engines that are confirmed to be on
	%@desc: This process checks if the LM, BMLeft and BMRight thrusters and engines or on. If this is the case the LM can launch and 
	%		proceed to the LM_fly process or if something goes wrong, the LM_ground_abort process.
	LM_ground(engine_on:Bool,bm_engine:Set(BoosterId)) =
		sum side:BoosterId. !(side in bm_engine) -> r_confirm_bm_thrust(side) . LM_ground(engine_on,bm_engine+{side})
		+ (!engine_on) -> confirm_lm_thrust . LM_ground(true,bm_engine)
		+ (engine_on && forall side:BoosterId. side in bm_engine) -> detach_ground_clamps . LM_fly
		+ ((sum side:BoosterId. r_fail_bm_thrust(side)) + (!NOFAIL)->fail_lm_thrust) . LM_ground_abort;

	%@desc: This process defines the actions the LM performs when it is in the air (fly, abort, stop).
	LM_fly =
		r_bm_fuel_empty . s_stop_bm_all . LM_stop_bm({side:BoosterId|true})
		+ ((sum side:BoosterId. r_fail_bm_thrust(side)) + (!NOFAIL)->fail_lm_thrust) . LM_abort;

	%@param(bm_on): Set of booster engines that are on
	%@desc: This process describes the actions the LM performs when it needs to stop the BMs. It gets both the BM's state in a parallel action(on or off), 
	%		If one of the booster modules failed or stopped we turn off the BM.
	LM_stop_bm(bm_on:Set(BoosterId)) = 
		(exists side:BoosterId. side in bm_on) -> (
			sum side:BoosterId. (side in bm_on) -> (r_stopped_bm(side) + r_fail_bm_thrust(side)) . LM_stop_bm(bm_on-{side})
			+ (!NOFAIL)->fail_lm_thrust . LM_abort
		) <> s_detach_bm_all . LM_sep_bm({side:BoosterId|true});

	%@param(bm_attached): Set of boosters that are attached to LM
	%@desc: This process describes the actions the LM performs when separating from the BMs. If it is separated and out of
	%		the atmosphere it will start the LM_fly_space process.	
	LM_sep_bm(bm_attached:Set(BoosterId)) = 
		(exists side:BoosterId. side in bm_attached) -> (
			sum side:BoosterId. (side in bm_attached) -> r_detached_bm(side) . LM_sep_bm(bm_attached-{side})
			+ (!NOFAIL)->fail_lm_thrust . LM_abort
			+ (!NOFAIL)->LM_abort %TODO add sep fail action
		) <> LM_fly_space;

	%@desc: This process defines the actions when the LM needs to abort. It stops both BMs, stops the LM and proceeds
	%		to the LM_safe process.
	LM_abort = s_lm_abort . s_stop_bm_all . stop_lm . LM_safe;

	%@desc: This process defines the actions when the LM is in space. The LM can fail resulting in an abort or it can succesfully
	%		achieve orbit in which case it stops and ends in a non-active process.
	LM_fly_space = 
		(!NOFAIL)->fail_lm_thrust . s_lm_abort
		+ r_lm_fuel_empty . stop_lm . s_lm_ready_detach . delta;
	

	%@desc: launch aborted at pad, rocket still on ground
	LM_ground_abort = s_stop_bm_all . stop_lm . abort_pad . LM_safe;

	%not 100% sure, we need to continue talking to boosters for their controllers to not hang
	LM_safe = LM_ignore_bm . LM_safe;

	%TODO remove
	LM_ignore_bm = 
		sum side:BoosterId. r_confirm_bm_thrust(side)
		+sum side:BoosterId. r_fail_bm_thrust(side);

	OM_wait = r_lm_ready_detach . OM;
	OM = detach_lm . s_detach_ascent_cover . r_confirm_cover_detach . ignite_om . (
		confirm_om_thrust . OM_fly
		+ (!NOFAIL)-> fail_om_thrust . stop_om . s_om_abort . delta
	);
	
	%@desc The OM is in orbit, When it is ready to detach it sends the message to the CM and terminates
	OM_fly = 
		(!NOFAIL)-> fail_om_thrust . stop_om . s_om_abort . delta
		+ r_alt_stage_om . stop_om . remap_valves_om . s_om_ready_detach . delta;

	%crew and service module
	%@desc The crew can get abort signals or a ready signal from lower stages
	%@param(hascover) indicates if the launch cover is still attached
	CM(hascover:Bool) = 
		(hascover) -> r_detach_ascent_cover . detach_ascent_cover . s_confirm_cover_detach . CM(false)
		+ (r_lm_abort + r_om_abort) . detach_om . abort_cm . ((hascover) -> detach_ascent_cover <> tau) . CM_land
		+ (!hascover) -> r_om_ready_detach . detach_om . do_space_stuff . CM_land;


	%TODO add  chutes, descent cover, airbags
	CM_land = remap_valves_sm . detach_sm . chutes_cm . detach_descent_cover . airbags_cm . land_cm . delta;
	

init allow(
	{
		%booster module
		ignite_bm,
		stop_bm,
		confirm_bm_thrust,
		fail_bm_thrust,
		detach_from_lm,
		
		c_confirm_bm_thrust,
		c_stopped_bm,
		c_fail_bm_thrust,
		c_detached_bm,

		%launch module
		ignite_lm,
		confirm_lm_thrust,
		fail_lm_thrust,
		stop_lm,
		detach_ground_clamps,
		abort_pad,

		%toggle comment for 1/2/3 boosters
		% c_startup_bm,
		% c_stop_bm,
		% c_detach_bm,
		c_startup_bm|c_startup_bm,
		c_stop_bm|c_stop_bm,
		c_detach_bm|c_detach_bm,
		% c_startup_bm|c_startup_bm|c_startup_bm,
		% c_stop_bm|c_stop_bm|c_stop_bm,
		% c_detach_bm|c_detach_bm|c_detach_bm,

		c_lm_abort,
		c_lm_ready_detach,

		%orbital module
		detach_lm,
		ignite_om,
		confirm_om_thrust,
		stop_om,
		fail_om_thrust,
		remap_valves_om,

		c_om_abort,
		c_om_ready_detach,
		c_detach_ascent_cover,
		c_confirm_cover_detach,

		%crew module
		detach_om,
		abort_cm,
		chutes_cm,
		detach_descent_cover,
		airbags_cm,
		land_cm,
		do_space_stuff,
		detach_ascent_cover,
		remap_valves_sm,
		detach_sm,

		
		%fuel sensors
		c_bm_fuel_empty,
		c_lm_fuel_empty,

		%altitude sensor/gps
		c_alt_stage_om
	},
	comm({
		s_startup_bm|r_startup_bm->c_startup_bm,
		s_stop_bm|r_stop_bm->c_stop_bm,
		s_confirm_bm_thrust|r_confirm_bm_thrust->c_confirm_bm_thrust,
		s_stopped_bm|r_stopped_bm->c_stopped_bm,
		s_fail_bm_thrust|r_fail_bm_thrust->c_fail_bm_thrust,
		s_detach_bm|r_detach_bm->c_detach_bm,
		s_detached_bm|r_detached_bm->c_detached_bm,
		s_lm_abort|r_lm_abort->c_lm_abort,
		s_lm_ready_detach|r_lm_ready_detach->c_lm_ready_detach,
		s_om_abort|r_om_abort->c_om_abort,
		s_om_ready_detach|r_om_ready_detach->c_om_ready_detach,
		s_detach_ascent_cover|r_detach_ascent_cover->c_detach_ascent_cover,
		s_confirm_cover_detach|r_confirm_cover_detach->c_confirm_cover_detach,
		s_bm_fuel_empty|r_bm_fuel_empty->c_bm_fuel_empty,
		s_lm_fuel_empty|r_lm_fuel_empty->c_lm_fuel_empty,
		s_alt_stage_om|r_alt_stage_om->c_alt_stage_om
	},
		%toggle comment for 1/2/3 boosters
		% BM(main,false)
		BM(left,false) || BM(right,false)
		% BM(left,false) || BM(right,false) || BM(extra,false)
		 || LM_startup || OM_wait || CM(true) || Fuelsensor || Altimeter
	)
);
